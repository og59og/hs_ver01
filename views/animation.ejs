<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
	<title>Animation example for mxGraph</title>

	<!-- Sets the basepath for the library if not in same directory -->
	<script type="text/javascript">
        mxBasePath = 'public';
	</script>

	<!-- Loads and initializes the library -->
	<script type="text/javascript" src="/library/mxgraph/javascript/mxClient.js"></script>

	<style type="text/css">
		.flow {
			stroke-dasharray: 8;
		  animation: dash 0.5s linear;
		  animation-iteration-count: infinite;
		}
		@keyframes dash {
		  to {
		    stroke-dashoffset: -16;
		  }
		}
	</style>

	<!-- Example code -->
	<script type="text/javascript">
		function main(container)
		{
			var graph = new mxGraph(container);
			graph.setEnabled(false);
			var parent = graph.getDefaultParent();

			var vertexStyle = 'shape=ellipse;strokeWidth=2;fillColor=#ffffff;strokeColor=black;' +
				'gradientColor=#a0a0a0;fontColor=black;fontStyle=1;spacingTop=6;';

			graph.getModel().beginUpdate();
			try
			{
				var v1 = graph.insertVertex(parent, null, 'G1', 20, 150, 60, 60,vertexStyle);
				var v2 = graph.insertVertex(parent, null, 'G2', 150, 150, 60, 60,vertexStyle);
				var v3 = graph.insertVertex(parent, null, 'G3', 150, 20, 60, 60,vertexStyle);
				var v4 = graph.insertVertex(parent, null, 'G4', 280, 150, 60, 60,vertexStyle);
				var v5 = graph.insertVertex(parent, null, 'G5', 280, 280, 60, 60,vertexStyle);
				var v6 = graph.insertVertex(parent, null, 'G6', 410, 150, 60, 60,vertexStyle);


				var e1 = graph.insertEdge(parent, null, '', v1, v2,
					'strokeWidth=3;endArrow=block;endSize=2;endFill=1;strokeColor=black;rounded=1;');
				var e2 = graph.insertEdge(parent, null, '', v2, v3,
				'strokeWidth=3;endArrow=block;endSize=2;endFill=1;strokeColor=black;rounded=1;');
				//e1.geometry.points = [new mxPoint(80, 50)];
				var e3 = graph.insertEdge(parent, null, '', v2, v4,
				'strokeWidth=3;endArrow=block;endSize=2;endFill=1;strokeColor=black;rounded=1;');
				var e4 = graph.insertEdge(parent, null, '', v4, v5,
				'strokeWidth=3;endArrow=block;endSize=2;endFill=1;strokeColor=black;rounded=1;');
				var e5 = graph.insertEdge(parent, null, '', v4, v6,
				'strokeWidth=3;endArrow=block;endSize=2;endFill=1;strokeColor=black;rounded=1;');
				graph.orderCells(true, [e1, e2, e3, e4, e5]);
			}
			finally
			{
				// Updates the display
				graph.getModel().endUpdate();
			}

			// Adds animation to edge shape and makes "pipe" visible

			var state = graph.view.getState(e1);
			setStateData(state, e1);
			state = graph.view.getState(e2);
			setStateData(state, e2);
			state = graph.view.getState(e3);
			setStateData(state, e3);
			state = graph.view.getState(e4);
			setStateData(state, e4);
			state = graph.view.getState(e5);
			setStateData(state, e5);
			/*
			state.shape.node.getElementsByTagName('path')[0].removeAttribute('visibility');
			state.shape.node.getElementsByTagName('path')[0].setAttribute('stroke-width', '6');
			state.shape.node.getElementsByTagName('path')[0].setAttribute('stroke', 'lightGray');
			state.shape.node.getElementsByTagName('path')[1].setAttribute('class', 'flow');
			*/
		};

		function setStateData(state, edgeItem){
			/* alert('in');
			var state = graph.view.getState(edgeItem); */
			state.shape.node.getElementsByTagName('path')[0].removeAttribute('visibility');
			state.shape.node.getElementsByTagName('path')[0].setAttribute('stroke-width', '6');
			state.shape.node.getElementsByTagName('path')[0].setAttribute('stroke', 'lightGray');
			state.shape.node.getElementsByTagName('path')[1].setAttribute('class', 'flow');
		};
	</script>
</head>

<!-- Page passes the container for the graph to the program -->
<body onload="main(document.getElementById('graphContainer'))">
	<!-- Creates a container for the graph with a grid wallpaper -->
	<div id="graphContainer"
		style="position:relative;overflow:hidden;width:800px;height:800px;background:url('/library/resources/grid.gif');cursor:default;">
	</div>
</body>
</html>